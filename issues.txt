Review BeanDefinition handling for configuration properties
For a "main" bean, we should be using `RootBeanDefintion` rather than `GenericBeanDefinition`:

https://github.com/spring-projects/spring-boot/blob/2095991ff0027ca03a8f375c497576204974ee6f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBeanRegistrar.java#L91-L98

In an arrangement where one is trying to programmatically reproduce such created definitions, it would be much nicer to rely on an attribute rather than on an implementation detail.

Also, having a single instance supplier for both value object and regular bean would avoid to [check if the bean has already been processed](https://github.com/spring-projects/spring-boot/blob/2095991ff0027ca03a8f375c497576204974ee6f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java#L98) and would make things more consistent. This also would have the advantage that no attribute is necessary.
configuration-processor does not pick up description from javadoc on inherited properties in different Maven modules
Affected version: Spring Boot 2.5.3
Build system: Maven 3.6.9

Consider a class annotated with `@ConfigurationProperties` extending another class located in a different Maven module in the same reactor, the description (JavaDoc) of the parent class' properties is not picked up by the configuration-processor and therefore not written to spring-configuration-metadata.json.

This is rather unhandy because we generate our configuration documentation out of the spring-configuration-metadata.json.

A sample project can be found here https://github.com/fjakop/spring-boot-configuration-processor-description

Check for `BProperties#output` and `CProperties#filenamePattern` in spring-configuration-metadata.json, there's no description but should be.