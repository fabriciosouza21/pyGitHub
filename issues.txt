Editorial changes to the multi-page reference documentation's index
 
Document how to parameterize output directory for REST Docs with WebTestClient
Forward port of issue #27803 to 2.6.x.
Document how to parameterize output directory for REST Docs with WebTestClient
Forward port of issue #27755 to 2.5.x.
Should SessionAutoConfiguration#addCandidateIfAvailable be polished?
https://github.com/spring-projects/spring-boot/blob/f386ebe61df37f8b1c3077f273905421bec0de5b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java#L241-L246



As far as i know, Condition `candidate != null` is always `true`.



A post regarding whether or not `Class.forName can return null` [here](https://stackoverflow.com/questions/430089/in-java-can-class-forname-ever-return-null) and everyone seems to think it can't (or wont).



I'm very curious about why this judgment condition is needed here. Could it be that I have missed some points?
server.tomcat.use-relative-redirects=true not honored when server.forward-headers-strategy=framework
For a Spring Boot webmvc application, when the property `server.tomcat.use-relative-redirects` is set to `true` and the server returns a 302 redirect, the `Location` header should contain only the URI path, not a full URL ("/path" instead of "http://host/path").



However, if the property `server.forward-headers-strategy` is also set to `framework` *and* the HTTP request contains a "forwarded" header like "X-Forwarded-Proto: http", the `Location` header contains a full URL, instead of only the URI path as expected.



### Detected in versions



Spring Boot: 2.5.4, 2.4.5

Java: 11.0.6



### Code Example



Controller:



```java

import org.springframework.stereotype.Controller;

import org.springframework.web.bind.annotation.GetMapping;

import org.springframework.web.bind.annotation.ResponseBody;



@Controller

public class RedirectController {

    @GetMapping("/redirect-to-foo")

    public String getRedirect() {

        return "redirect:/foo";

    }



    @GetMapping("/foo")

    @ResponseBody

    public String getFoo() {

        return "This is a test";

    }

}

```



Controller Test:



```java

import org.junit.jupiter.api.Test;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;

import org.springframework.boot.test.context.SpringBootTest;

import org.springframework.test.context.TestPropertySource;

import org.springframework.test.web.reactive.server.WebTestClient;



@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)

@AutoConfigureWebTestClient

@TestPropertySource(properties = {

    "server.tomcat.use-relative-redirects=true",

    "server.forward-headers-strategy=framework"

})

class RedirectControllerTest {

    @Test

    void testRedirect(@Autowired WebTestClient webClient) throws Exception {

        webClient.get()

            .uri("/redirect-to-foo")

            .exchange()

            .expectStatus().is3xxRedirection()

            .expectHeader().location("/foo");

        // Succeeds

    }



    @Test

    void testRedirectWithForwardedHeaders(@Autowired WebTestClient webClient) throws Exception {

        webClient.get()

            .uri("/redirect-to-foo")

            .header("X-Forwarded-Proto", "http")

            .exchange()

            .expectStatus().is3xxRedirection()

            .expectHeader().location("/foo");

        // Fails with error:

        // java.lang.AssertionError: Response header 'Location' expected:</foo> but was:<http://localhost/foo>

    }

}

```
NullPointerException in RoutingDataSourceHealthContributor when a routing data source has a target with a null routing key
Forward port of issue #27698 to 2.6.x.
@MockBean combined with @Repeat results in "the field cannot have an existing value" error
Forward port of issue #27798 to 2.6.x.