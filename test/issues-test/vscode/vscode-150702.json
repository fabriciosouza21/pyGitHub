{
  "comments":[
    {
      "comment":"Links in this format in the Test Peek window are underlined and say \"Cmd+click\" in the hover, but clicking them does not work because of the line/col on the end:\r\n\r\n![Screenshot 2022-05-30 at 12 52 40](https://user-images.githubusercontent.com/1078012/170987157-328bc99c-96eb-4e98-8234-59e6a7cf1d2d.png)\r\n\r\n![Screenshot 2022-05-30 at 12 52 52](https://user-images.githubusercontent.com/1078012/170987219-d90c54b0-1dee-4aab-8696-b6ea0f97a11f.png)\r\n\r\n(Same is true of the debug console)\r\n\r\nSince this output comes from the test framework, it's not easy for an extension to change it, but it seems like a common enough format that VS Code should handle it.",
      "user":"DanTup"
    },
    {
      "comment":"I've added support for it in the debug console in the linked PR.\r\n\r\nHowever, test output is just an editor, and you'll see this syntax is not supported in other editors either. Maybe that's something that we should change. @lramos15 do you own the opener service? If not, do you know who to pass it off to?",
      "user":"connor4312"
    },
    {
      "comment":"I believe the code editor creates these links and then passes them into the opener service, but line/col information cannot just be part of the URI path, they have to be provided differently, so the code editor needs to detect accordingly. `:` is a valid character of a file name btw.\r\n\r\nWe have a utility method to produce URIs that contain line/col info:\r\n\r\nhttps://github.com/microsoft/vscode/blob/b3ec8181fc49f5462b5128f38e0723ae85e295c2/src/vs/platform/opener/common/opener.ts#L147",
      "user":"bpasero"
    },
    {
      "comment":"> I believe the code editor creates these links and then passes them into the opener service, but line/col information cannot just be part of the URI path,\r\n\r\nFor built-in URI detection, in order to avoid any URI parsing -> toString() data-loss, the editor calls the opener service with the link as a verbatim string i.e. for a file containing the content `file:///Users/alex/src/working_dir/144691.ts:17`, the call will be `IOpenerService.open(\"file:///Users/alex/src/working_dir/144691.ts:17\")`, so the opener service itself decides to place `:17` in the URI path. \r\n\r\nIn case it is called with a string, would converting `\"file:///Users/alex/src/working_dir/144691.ts:17\"` to `\"file:///Users/alex/src/working_dir/144691.ts#L17\"` be something that other users of the opener service could benefit from?",
      "user":"alexdima"
    },
    {
      "comment":"For `file` uris it doesn't matter if its `URI` or `string` because [it will always be transformed](https://github.com/microsoft/vscode/blob/b3ec8181fc49f5462b5128f38e0723ae85e295c2/src/vs/editor/browser/services/openerService.ts#L63) to `URI` (this only matters for http and other \"external\" uris). The issue here is that the opener service (more precisely  @bpasero's [`extractSelection`](https://github.com/microsoft/vscode/blob/b3ec8181fc49f5462b5128f38e0723ae85e295c2/src/vs/platform/opener/common/opener.ts#L161)-util ) only looks at the uri-fragement, not at the path. We never used to do that, so `feature-request` is fair. \r\n\r\n@DanTup Do you control those messages? Can you create the links as `file:///ssss/bbb.txt#L12:111`? ",
      "user":"jrieken"
    },
    {
      "comment":"> @DanTup Do you control those messages? Can you create the links as file:///ssss/bbb.txt#L12:111?\r\n\r\nNot myself, they're coming from the test runner and/or the VM stack traces. I can file an issue in Dart/test runner about changing them, although it could be quite a breaking change given lots of other code/cools might parse thsee. I don't think Dart is the only place I've seen that format though, so I think having VS Code handle them might benefit other languages/test runners/etc. too.\r\n\r\n> `:` is a valid character of a file name btw\r\n\r\nHmm yeah, this seems unfortunate. Is it possible to first try the filename as-is, and if it doesn't exist look for `:\\d+` from the end as line/cols?",
      "user":"DanTup"
    },
    {
      "comment":"It's a little funny. With just path names we are relaxed and try out more \"variations\" but when an uri is given we assume that the source knows what it is doing",
      "user":"jrieken"
    },
    {
      "comment":"Is it feasible to make URIs do something similar?\r\n\r\nAlthough using colons seems ambiguous, I wasn't able to find any real \"standards\" for adding line/cols. I suspect it's unlikely Dart will change (because it could be quite a breaking change to anything trying to parse stack traces), but if it did, it would probably be more likely if there was some clear standard. I know GitHub uses `#Lx:y`, but my understanding was that `L` was for \"left\" which seems a little odd to use generally here.",
      "user":"DanTup"
    },
    {
      "comment":">  I know GitHub uses #Lx:y, but my understanding was that L was for \"left\" which seems a little odd to use generally here.\r\n\r\nIt's the first time I hear about \"left\" and I don't believe that interpretation makes much sense. Still, we support a few variants with and without the _L_ine characters (see [docs](https://github.com/microsoft/vscode/blob/b3ec8181fc49f5462b5128f38e0723ae85e295c2/src/vs/platform/opener/common/opener.ts#L152-L161))\r\n\r\n> but if it did, it would probably be more likely if there was some clear standard. \r\n\r\nI believe uri/url fragments are the closet to such standard. They are meant to represent intra document anchors, like https-anchor links, e.g. https://github.com/Dart-Code/Dart-Code#extension-settings\r\n\r\n\r\n> suspect it's unlikely Dart will change (because it could be quite a breaking change to anything trying to parse stack traces)\r\n\r\nI understand that. IMO the easiest would be to massage these uris in the dart-extension (between receiving and submitting) because you already know what to expect from Dart and you have less/no chances of unwanted uri-breakage (which is a risk VS Code would take if we blindly, without context, change the meaning of uri-handling)",
      "user":"jrieken"
    },
    {
      "comment":"> It's the first time I hear about \"left\" and I don't believe that interpretation makes much sense. \r\n\r\nIt makes a bit more sense when you view a diff, as changing it to `R` selects the rows from the right right files (the format seems slightly different now, it used to have the filenames in the URI, but maybe I'm just looking at a different page right now):\r\n\r\n<img width=\"1314\" alt=\"Screenshot 2022-06-21 at 10 14 48\" src=\"https://user-images.githubusercontent.com/1078012/174764006-110dd6e0-e8f6-48f0-a225-7517f4deffc3.png\">\r\n\r\n> IMO the easiest would be to massage these uris in the dart-extension\r\n\r\nIt's possible to do this for Test Peek, but not for Debug Console, as that comes directly from the debug adapter (which is migrating to the Dart SDK and intended to be editor-agnostic). That also only solves it for Dart, but there are lots of things that use this format - NodeJS which VS Code uses uses the same format itself:\r\n\r\n```\r\ndanny@Dannys-MacBook-Pro /tmp % echo \"console.trace();\" > test.js\r\ndanny@Dannys-MacBook-Pro /tmp % node test.js                     \r\nTrace\r\n    at Object.<anonymous> (/private/tmp/test.js:1:9) // <-----------\r\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\r\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\r\n    at Module.load (node:internal/modules/cjs/loader:981:32)\r\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\r\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\r\n    at node:internal/main/run_main_module:17:47\r\n```\r\n\r\n> less/no chances of unwanted uri-breakage (which is a risk VS Code would take if we blindly, without context, change the meaning of uri-handling)\r\n\r\nI don't think it's really \"blindly without context\" if you only did it if the original URI doesn't exist (although I don't know how easily you have access to know if it exists where you need this). It just seems like handling it in VS Code would improve a lot of things for a lot of people (not just Dart users) if it were handled.",
      "user":"DanTup"
    },
    {
      "comment":"> That also only solves it for Dart, but there are lots of things that use this format - NodeJS which VS Code uses uses the same format itself:\r\n\r\nThere is a difference between `/private/tmp/test.js:1:9` and `file:///private/tmp/test.js:1:9` - the latter is an uri and that gives me the impression that the provided information is \"more correct\" and should be interpreted as-is",
      "user":"jrieken"
    },
    {
      "comment":"> the latter is an uri and that gives me the impression that the provided information is \"more correct\" and should be interpreted as-is\r\n\r\nBut there's no clear definition of \"correct\" here. The conventions linked above seem like things that VS Code has decided on (or perhaps borrowed from something like GitHub's URIs) and not some published standard.  The closest I could find to a public \"spec\" is https://datatracker.ietf.org/doc/html/rfc5147 which uses `#line=x` (which VS Code doesn't support, although I'm not advocating using this).\r\n\r\nWithout any obvious standard, I'm not sure I understand the reluctance to make VS Code compatible with more formats. It seems like the chance of it doing the wrong thing is almost zero (especially if you try the original URI first, and only fall back to treating the last characters as line/col if the URI doesn't exist). I don't think there's a huge difference between \"a file path followed immediately by `:1:2`\" and \"a file URI followed immediately by `:1:2`\". In both cases, the `:1:2` _could_ be part of the file path. Using URIs avoid issues with escaping/spaces with wrapping/different slash directions.\r\n\r\nIs this something you'd accept a PR for?",
      "user":"DanTup"
    }
  ],
  "repository":"vscode",
  "user":"DanTup"
}