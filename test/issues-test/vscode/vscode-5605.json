{
  "comments":[
    {
      "comment":"VSCode very quickly got to _nearly_ being my default editor.  One thing I'm missing is something like https://atom.io/packages/symbols-tree-view where I can view the structure of a file whilst editing. I've used this view across many editors for years.\n",
      "user":"boyvinall"
    },
    {
      "comment":"Ideally, it would expose API this for extension authors.\n",
      "user":"bgse"
    },
    {
      "comment":"This is available though not as a separate view and a flat list. You can press Ctrl+Shift+O to get a symbol outline of the currently open file.Ctrl+T shows all symbols in the workspace. You can type in there to filter the list down.\n\n![capture](https://cloud.githubusercontent.com/assets/1931590/14710009/f0e17d88-07d3-11e6-8c23-a9344ebb081d.png)\n",
      "user":"dbaeumer"
    },
    {
      "comment":"Thanks Dirk.  Yes, I saw that already, but I find it less of an interruption when that view is constantly onscreen in a separate panel.  Also, the ability to filter this list so as e.g. not to include variables is useful - which is harder to do in a pop-down view.\n",
      "user":"boyvinall"
    },
    {
      "comment":"@dbaeumer Sometimes, this seems to cut off unnecessarily early, see here:\n\n![vscode_outline](https://cloud.githubusercontent.com/assets/8385202/14710619/6c7f7a6a-07d6-11e6-9d01-0c733a9b45c4.png)\n\nThinking about it, I probably even like the current approach better, need to get used to it a little, but it is faster to use compared with traditional outline presentation.\n",
      "user":"bgse"
    },
    {
      "comment":"@bgse known issue. I opened a issue in the TS repository for this.\n",
      "user":"dbaeumer"
    },
    {
      "comment":"Had a request for this for Dart Code. Am I right in assuming we can't implement this (even ourselves) and would need support from Code?\n",
      "user":"DanTup"
    },
    {
      "comment":"Not sure TBH.  I'm still interested in it, but my `(available_time / skill_set_proficiency)` isn't likely to find me investigating any time soon. Appreciate any other efforts here.\n",
      "user":"boyvinall"
    },
    {
      "comment":"@DanTup you mean a tree view. Yes. this would need support from the Workbench. Filling the Ctrl+Shift+O flat list is API.\n",
      "user":"dbaeumer"
    },
    {
      "comment":"@dbaeumer Yeah, I meant the tree - we're already providing the document symbols for the flat list. Thanks for confirming!\n",
      "user":"DanTup"
    },
    {
      "comment":"As I mentioned in #10788 , the \"symbols tree view\" could be made a LOT more powerful than in atom. In my humble opinion, Eclipse got that aspect of the UI absolutely right. Here's a screenshot of the outline view displayed by Eclipse for a Java file:\n\n![outline](https://cloud.githubusercontent.com/assets/16356998/16942947/4c382adc-4d99-11e6-8703-a8a64a1ca62d.png)\n\nThere are several things worth mentioning here:\n- The view is a sidebar and permanently visible. It is always in sync with the current file in the editor.\n- It's a tree view, where each class is a node and every member of that class becomes a child of the class node. Nodes can be collapsed or expanded, as with any other standard tree.\n- The view displays a lot more information than the plain element names\n  - The shape/silhouette of icons for fields are different than the icons of methods to allow to distinguish them easily\n  - Icons have decorators to indicate that a member is `final` (a.k.a. `readonly`), `static`, `abstract`, or overrides a declaration in the parent class (to name a few examples)\n  - The color of the icons indicate their visibility (`public` = green, `protected` = yellow, `private` = red)\n  - The type of each field is written directly after the name\n  - The parameter types and return types are written directly after method names. This also allows to easily see the number of parameters at a glance.\n- A click on a member jumps to the declaration in the code\n- There are also refactoring features built into this UI in Eclipse:\n  - Dragging a member and dropping it to another position also refactors the code by moving the code block belonging to that member to the position indicated by the drop target. \n  - Deleting a tree node also deletes the corresponding sections of code in the file.\n  - Any node has a context menu that allows for different operations, e.g. rename\n- The context menu also offers things like \"find references\" or \"open call hierarchy\"\n- A toggle button on the UI allows to switch between alphabetic sorting and \"as occurs in file\" sorting in the outline display.\n- The current cursor position is shown in the outline view by highlighting the member (or class) where the cursor currently resides within. E.g. if my cursor is within method \"bar()\" of class \"Foo\", then the outline will highlight the tree node \"Foo\" and the child node \"bar()\".\n\nI think that this particular feature is brilliantly done in Eclipse, and I would love to see it realized in VScode for Typescript in particular. When I navigate through code in Eclipse and search for something, it's usually just a sequence of \"open type -> check outline\". You don't even have to look at the source code for navigation, which makes it very fast, elegant and \"brain friendly\".\n",
      "user":"MartinHaeusler"
    },
    {
      "comment":"If you do add support for a tree; could you also consider allowing it to be used for type hierarchy too? Had that request too, but current ideas (eg. using quick pick) kinda suck: https://github.com/Dart-Code/Dart-Code/issues/133\n",
      "user":"DanTup"
    },
    {
      "comment":"Having a Object Viewer / Structure Inspector / Class Hierarchy tree \n_integrated into the  View Bar and Side Bar_ \n(components A,B in graph below)\n[VSC UI](https://code.visualstudio.com/images/codebasics_hero.png)\n\nwould be a great improvement for user experience and code navigation.\n\nI asked for it in #397 and then again in #6376 to no avail.\n\nLast time I looked at the APIs there was no way to interact with Side &  View Bar in order to create it\nas an external plug-in.\n\n--R\n",
      "user":"RobertoMalatesta"
    },
    {
      "comment":"@MartinHaeusler is right. You should focus and working on this feature as in Eclipse. It would definitely one of your killing feature to stand against Atom / Sublime.\n",
      "user":"alexisgahon"
    },
    {
      "comment":"VOTE\n",
      "user":"GaryFurash"
    },
    {
      "comment":"+1\n",
      "user":"leaxoy"
    },
    {
      "comment":"In case that there was any doubt after my post:\n\n+1.\n",
      "user":"MartinHaeusler"
    },
    {
      "comment":"+1\n",
      "user":"dakk"
    },
    {
      "comment":"Is this being looked at? For me, this would be really important.\n",
      "user":"MartinHaeusler"
    },
    {
      "comment":"+1\n",
      "user":"phunghv"
    },
    {
      "comment":"+1\n",
      "user":"funvit"
    },
    {
      "comment":"Hi all, prefer :+1: reactions on the original issue comment as that helps us with prioritization. If you're on a mobile device you can use reactions by first hitting the \"Desktop version\" button at the bottom of the page.\n",
      "user":"Tyriar"
    },
    {
      "comment":"+1\n",
      "user":"ozanh"
    },
    {
      "comment":"+1\n",
      "user":"chun-wang"
    },
    {
      "comment":"+1\n",
      "user":"sychan"
    },
    {
      "comment":"Stop typing plus one, I'm listening for real updates! \n",
      "user":"Zielak"
    },
    {
      "comment":"I'm expecting the feature appearing in VSCode.\n",
      "user":"LiPengfei19820619"
    },
    {
      "comment":"+1\n",
      "user":"bdesemb"
    },
    {
      "comment":"+1\n",
      "user":"vegarringdal"
    },
    {
      "comment":"@MartinHaeusler Outline view of Eclipse is really my favorite feature in all kinds of IDEs. \n",
      "user":"ToMakeSense"
    },
    {
      "comment":"@ToMakeSense Mine too. I can't understand how people can work without it.\n",
      "user":"MartinHaeusler"
    },
    {
      "comment":"Can you just add a `Ctrl+T` icon into the side bar please like the file explorer? I think just adding one more icon that opens the workspace symbol tree with a sub icon toggle button `Ctrl+Shift+O` in the tree panel itself is good enough for now until you have time to figure out something more advanced.\n![image](https://cloud.githubusercontent.com/assets/863731/20279727/f71323c2-aaa9-11e6-88b0-9775b39fd0fe.png)\n",
      "user":"gertcuykens"
    },
    {
      "comment":"So, giving my vote here, I requested the same thing, to have the Netbeans Navigator panel in VS Code as well.\n",
      "user":"scmaverick"
    },
    {
      "comment":"+1",
      "user":"ralphavalon"
    },
    {
      "comment":"this is useful for source code reading. Is there any work on it?",
      "user":"leaxoy"
    },
    {
      "comment":"+1",
      "user":"NonTestatum"
    },
    {
      "comment":"I vote for this feature. A must have.",
      "user":"fractalspace"
    },
    {
      "comment":"+1",
      "user":"38b3eff8"
    },
    {
      "comment":"+1 to this feature request. Here's a hack while we wait for this feature: just do a search to see a nice outline view. In the search panel, put\r\n\r\n     function\\s([_A-Za-z0-9]+)\\s*\\(\r\n\r\nreplacing 'function' with your language's function keyword, and hitting the \"Use regular expressions\" button on the right.\r\n\r\nIt doesn't show symbols, just functions, but it's useful and looks like how I'd like the real feature to look.\r\n\r\n[Courtesy: [Picard at Stack Overflow](http://stackoverflow.com/a/41423315/2748653) ]\r\n",
      "user":"GaryBoone"
    },
    {
      "comment":"I hacked it a bit to show top level symbols only.\r\n\r\nYou can do it too.\r\nthe change is in \r\nsrc/vs/workbench/parts/quickopen/browser/gotoSymbolHandler.ts\r\n\r\nOn line 55 modify the code accordingly:\r\n\r\n```\r\n\r\nconst parentEntries = this.entries.filter((entry: SymbolEntry) => {\r\n\treturn entry.getType() == 'class' || entry.getType() == 'interface' || entry.getType() == 'namespace'\r\n}).map((entry) => {\r\n\treturn entry.getLabel()\r\n})\r\n\r\n// Check for match and update visibility and group label\r\nthis.entries.forEach((entry: SymbolEntry) => {\r\n\r\n\t// Clear all state first\r\n\tentry.setGroupLabel(null);\r\n\tentry.setShowBorder(false);\r\n\tentry.setHighlights(null);\r\n\tentry.setHidden(false);\r\n\r\n\t// Filter by search\r\n\tif (normalizedSearchValue) {\r\n\t\tconst highlights = filters.matchesFuzzy(normalizedSearchValue, entry.getLabel());\r\n\t\tif (highlights) {\r\n\t\t\tentry.setHighlights(highlights);\r\n\t\t\tentry.setHidden(false);\r\n\t\t} else if (!entry.isHidden()) {\r\n\t\t\tentry.setHidden(true);\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tconst isHidden = (entry.getDescription() !== undefined && entry.getDescription().trim() !== '' && parentEntries.indexOf(entry.getDescription()) == -1) || entry.getLabel().trim() == '<function>' //(for anonymous funcs)\r\n\t\tentry.setHidden(isHidden);\r\n\t}\r\n});\r\n```\r\n\r\n\r\nbasically it checks if symbol description is empty (all items in inner scope have description - otherwise the top methods and classes don't)\r\n\r\nThen package the vscode and you'll have tree view, kinda.\r\n\r\nAlso I have extension that will help you to further customize the symbols to look a bit more like tree view:\r\nhttps://marketplace.visualstudio.com/items?itemName=dannylazarov.bettergoto\r\n\r\n",
      "user":"vaderdan"
    },
    {
      "comment":"VSCode release 1.10.0 came with this thing called minimap side view.  I don't have a retina display, so perhaps that's why I did not find it useful AT ALL.  I turned it off as soon as I turned it on :)\r\n\r\nLooking forward to this \"document outline\" I hope it will come with some customizations like \r\n1. filter down to only methods I care about eg. methods, fields, props, etc....\r\n2. allow to switch between different sorting, like current layout versus sorting alphabetical versus by type and by access.\r\n\r\n**Both 1 and 2** features should be toggles via some toolbar buttons on this tree view pane, not some configuration thingy buried in settings.json :)\r\n\r\n3. Moving blocks of code reliably might become more appealing via drag-drop in this tree view pane.\r\nI can live without this, as most of my files are only 2 to 3 pages long.\r\n\r\nI have subscribed to this issue and hope to see it closed :) soon\r\nThank you.\r\n ",
      "user":"AlGantori"
    },
    {
      "comment":"I think tagbar is better than command+shift+o",
      "user":"drinktee"
    },
    {
      "comment":"+1",
      "user":"forevering"
    },
    {
      "comment":"+1",
      "user":"LiPengfei19820619"
    },
    {
      "comment":"+1",
      "user":"raphael-volt"
    },
    {
      "comment":"Now that the minimap has been integrated, I really hope to see this \"tagbar\" concept in the near future ! <3",
      "user":"skol-pro"
    },
    {
      "comment":"+1",
      "user":"liuhaopen"
    },
    {
      "comment":"+1 to this feature request.",
      "user":"bostonsqd"
    },
    {
      "comment":"no more +1s please. PLEASE.",
      "user":"Zielak"
    },
    {
      "comment":"To reiterate what was mentioned [a while back](https://github.com/Microsoft/vscode/issues/5605#issuecomment-252339295):\r\n\r\n> Hi all, prefer :+1: reactions on the **original issue comment** as that helps us with prioritization. If you're on a mobile device you can use reactions by first hitting the \"Desktop version\" button at the bottom of the page.\r\n\r\nIn other words, please **don't** comment \"+1\" at the bottom of this page. Instead add a :+1: to the **[first comment](https://github.com/Microsoft/vscode/issues/5605#issue-150065540)** on this issue.",
      "user":"agwells"
    },
    {
      "comment":"why did you close this? all the related issues are marked duplicate and closed now but no solution :o\r\n\r\nalso, +1",
      "user":"sbimikesmullin"
    },
    {
      "comment":"It wasn't intended to close it. Sorry, I would like to emphasize this. +1\n\nBest regards, \nMartin \n\nMike Smullin <notifications@github.com> schrieb am 21.03.2017:\n>why did you close this? all the related issues are marked duplicate and\n>closed now but no solution :o\n>\n>also, +1\n\n-- sent by mobile ",
      "user":"GitHub-Schubi2017"
    },
    {
      "comment":":+1: In the (Default `ctrl+shift+o`) or my `ctrl+r`, typeing a colin in the list: `@:` separates them by Class, function, property, module, variables -- however I also am dying for a tree (like Netbeans has). ST3 doesn't have this either.",
      "user":"JREAM"
    },
    {
      "comment":"Guys please vote for _Table of content, easy jump to code section #23698_  👍\r\n\r\nThis would add a ToC in this _symbols tree view panel_ we ask here. The ToC items would be sections you create through special comment headings in your file. What an easy way to organize your code and quick jump through those sections. 😉\r\n\r\n![Image](https://camo.githubusercontent.com/dbb8910ec51af12b0874103c8b61a07628962930/687474703a2f2f696d6775722e636f6d2f754968735138412e676966)\r\n\r\nA must for CSS files.",
      "user":"freMea"
    },
    {
      "comment":"+1 for this feature request",
      "user":"naren-m"
    },
    {
      "comment":"Probably one of the very few who moved from BBEdit to VS Code, this is one of the features I miss. For reference, BBEdit shows the method you are in that also functions as a drop down (similar to Ctrl/Cmd+Shift+O). I like this non-intrusive feedback that can be persistent.\r\n\r\n<img width=\"337\" alt=\"screenshot_289\" src=\"https://cloud.githubusercontent.com/assets/222257/24930409/68325004-1ed7-11e7-9e0f-31519eef77ef.png\">\r\n",
      "user":"lgelfan"
    },
    {
      "comment":"without it, it's a deal breaker, mr. visual studio code.\r\n\r\nninja-ide gets it nice with python. i was hoping for a side bar like this..\r\n\r\n![image](https://cloud.githubusercontent.com/assets/22704047/25178359/dc31c56c-2548-11e7-83a1-019165fd268b.png)\r\n\r\n",
      "user":"stOneskull"
    },
    {
      "comment":"Is this feature really that hard to implement in VSCode or has it just very low priority? \r\n\r\nJust curious - I noticed that \"code outline as separate panel\" feature request pops itself through months without any visible progress. I mean, I'm sure that authors of VS Code work very hard on this editor, so there must be reason why often requested feature is not there yet.\r\n\r\nBTW maybe this feature could be implemented by community as an extension? If so, what would be best approach to make such an extension in a way that would integrate well with VSCode?\r\n\r\n\r\n",
      "user":"hex13"
    },
    {
      "comment":"Also the smaller font choice is key for the structure pane concept - it allows you to see the file at a glance.  Structure panes are a big part of the user friendliness failures these lightweight editors.  In fact part of the reason I ditched Eclipse was because not all languages have them so well done - for example, es6 a year ago had no real structure pane that was usable.  For Java it did it great though.",
      "user":"ilazarte"
    },
    {
      "comment":"I too have been waiting for this feature for some months now. Really weird that it's still not available (even as an extension).\r\nI really like VScode, but without a structure explorer, it's not going to be my daily editor and I'll stick to Brackets.\r\nIf MS really wants this to be the best editor going to be used by everyone then implement this feature !\r\n",
      "user":"tinypin"
    },
    {
      "comment":"I really like VScode, but without a structure explorer, it's not going to be my daily editor and I'll stick to pycharm. ",
      "user":"heng4fun"
    },
    {
      "comment":"Well... I've made the package for Atom which implements similar fuctionality, it's called Lupa: \r\nhttps://atom.io/packages/atom-lupa\r\n(it's outline, breadcrumbs and semantic search).\r\n\r\nTheoretically it would be possible to port Lupa to VSCode, but I can't do this right now.\r\n\r\nLupa is made from two parts: **GUI**  (made in ReactJS) which could be considered as \"good enough\", and **static analysis** part (it parses code and analyze ASTs) and that part needs major overhauling.\r\n\r\nSo I’m rewriting now **static analysis part** of Lupa from scratch (which involves building library similar to Tern - so I don’t have time to port anything right now, maybe later.\r\n\r\nAlthough VSCode seems to make a lot of static analysis right now so I suppose it could be possible to connect GUI of my extension to some sort of language service in VSCode? (would it be possible?)\r\n\r\nBut I'm still not sure if VSCode allows extensions to inject custom HTML into panels (does it?).\r\n\r\n",
      "user":"hex13"
    },
    {
      "comment":"The biggest problem that I have with the symbol outline that you get with Ctrl+Shift+O is that it overlays the text of the buffer, meaning that it is more difficult to move around between the symbols **and** see the underlying text at the same time.\r\n\r\nI do also really like the symbol tree that exists in Atom, and would love to see it in VSCode too.",
      "user":"darrenkenny"
    },
    {
      "comment":"I think that there is no need for discussion about CTRL+SHIFT+O here. While it does offer similar information and is a valid and important functionality in and on itself, the use case is a very different one than for a structure tree view. The structure tree view needs to be a panel (i.e. always visible and not overlaying editor content) and a tree (because it displays the Abstract Syntax *Tree* after all).\r\n\r\nIt would be nice to get an update on this from the VSCode devs. Several other typescript editors already have this feature.",
      "user":"MartinHaeusler"
    },
    {
      "comment":"Yup -- this feature (symbols tree view) -- is a must for serious code editing.",
      "user":"ghost"
    },
    {
      "comment":"Voted for this feature, it is tedious to open up the overlay with the shortcut every time, and it's not quite what you would expect. To my taste, a codemap should always be visible, it helps keeping a clear idea of what's going on and encourages a clean and well-written code with explicit function names, logical order, a separation of concerns... It should support regions as well as expose the input and output types, _etc_.\r\n\r\nI think the best codemap I've ever used is that of the [Supercharger plugin for Visual Studio](http://supercharger.tools/#sectionCodeMAP), it's just plain fantastic and has all of those features. I'd love to see one of those in vscode 👍 ",
      "user":"acidoxee"
    },
    {
      "comment":"Hey guys, I really missed treeview so I gave it a shot with this hackish solution, any input is welcome, I believe it's possible to make it somewhat stable with fixed width panels and some more checks if HTML preview panel is visible to ensure it's present, I put this together last night: https://marketplace.visualstudio.com/items?itemName=igbenic.symbolstreeview\r\nhttps://github.com/igbenic/SymbolsTreeview",
      "user":"igbenic"
    },
    {
      "comment":"@igbenic I've just started working today and your extension is already helping. Thanks a lot, great work!",
      "user":"viniciushsantana"
    },
    {
      "comment":"@vegbrasil Thanks man, glad you like it!",
      "user":"igbenic"
    },
    {
      "comment":"@igbenic nice work! \r\nOne thing to propose is positioning of found symbol in editor. Now it's vertically positioned in bottom of the editor, I guess more convenient would be to scroll it to middle of screen.\r\nThanks!",
      "user":"jorups"
    },
    {
      "comment":"@igbenic I tried it, unfortunately I wasn't able to get past the loading indicator - the panel content always remained blank for me. I am using *.tsx files (XML extensions, for React) instead of *.ts files, is that somehow related?",
      "user":"MartinHaeusler"
    },
    {
      "comment":"Hi there thank you for your input! @jorups I'll add this to feature requests :), @MartinHaeusler well basically if cmd+shift+o shows you a list of symbols they should be in my extension also. Other than that I am working on some hot fixes for when to trigger symbols refresh for next version so there might be a solution",
      "user":"igbenic"
    },
    {
      "comment":"How is this not a higher priority?!  This feature seems to be extremely popular and most of the pieces already exist so it shouldn't be too resource-intensive to implement.  Come on vscode team - come through for us!",
      "user":"johnhamm"
    },
    {
      "comment":"As much as I love VSCode, the lack of this feature has pushed me back to using Webstorm. Sorry guys, it's too essential.",
      "user":"Ziao"
    },
    {
      "comment":"I've put this together last night using the new APIs introduced in 1.13: [Code Outline](https://marketplace.visualstudio.com/items?itemName=patrys.vscode-code-outline). It's pretty basic so contributions are welcome.",
      "user":"patrys"
    },
    {
      "comment":"Good job, although I have some remarks. I don't see Github site of your extension so I'll write this here.\r\n\r\n1. Enabling outline is not intuitive. As a user I would like to click `View -> Show Outline` or `1. press Cmd + Shift + P 2. write 'outline' 3. press enter`. I just didn't see at the beginning \"how I can enable this\". It's very small part of left panel's accordion:\r\n![image](https://user-images.githubusercontent.com/3883359/27002884-6f6ea838-4dec-11e7-937a-a57411e16b2a.png)\r\n\r\n2. after clicking on entity in outline there is no visual indicator \"where given entity is\" It may e.g. move cursor to it or highlight this in editor. Also it would be nice to focus editor after clicking. Without this, it's not very useful (I clicked and I couldn't write code right away).\r\n\r\n",
      "user":"hex13"
    },
    {
      "comment":"I tired to figure how to enable / find it for some time, so I googled up [the source repo](https://github.com/patrys/vscode-code-outline). Overall, great job, though. Looks super-useful.",
      "user":"farcaller"
    },
    {
      "comment":"@hex13 as of 0.0.2 clicking items should now activate the editor. Let's move feedback to the extension page or its GitHub repo though so we don't spam all of these nice people subscribed to this thread.",
      "user":"patrys"
    },
    {
      "comment":"@patrys Opened issue on [Visual indicator on code](https://github.com/patrys/vscode-code-outline/issues/1), it's similar to what @hex13  says",
      "user":"Danieleeee"
    },
    {
      "comment":"@patrys I love it !!!",
      "user":"heng4fun"
    },
    {
      "comment":"we need symbols tree like monodeveloper!",
      "user":"boboshu"
    },
    {
      "comment":"As of 1.14, this is possible using this extension: https://marketplace.visualstudio.com/items?itemName=patrys.vscode-code-outline",
      "user":"jens1o"
    },
    {
      "comment":"@jens1o thanks my friend！i like it！",
      "user":"boboshu"
    },
    {
      "comment":"An option would be to use [Notepad++'s functionList.xml](https://notepad-plus-plus.org/features/function-list.html) so that we can customize the pattern matching. Because vscode doesn't even show @ symbols for some popular languages, such as perl. so I doubt that a separate view will be useful for everyone.",
      "user":"nurp"
    },
    {
      "comment":"@nurp Open a separate issue if your language is not supported by VSCode. A feature like this one is not language-specific. It's up to the language plugin to provide symbols necessary to construct the outline.",
      "user":"patrys"
    },
    {
      "comment":"There is a small upgrade to `Go to Symbol` feature which added a great potential on how we can inspect the code outline:\r\n\r\n> **[Go to Symbol](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-symbol)**\r\n>\r\n> You can navigate symbols inside a file with ⇧⌘O. **_By typing `:` the symbols will be grouped by category_**. Just press Up or Down and navigate to the place you want.\r\n\r\nPersonally this is great enough for me, also I can peek the code definition like before.",
      "user":"rankun203"
    },
    {
      "comment":"@rankun203  awesome!\r\nbut how can I config a keypress shortcut?\r\nand can it config with \"Group by Class\"? \r\nI also hope symbols in functions can grouped by function,symbols in class can grouped by class,function in class can grouped by class too",
      "user":"zjjott"
    },
    {
      "comment":"@jens1o thank you, this extension works great for python code",
      "user":"caiofcm"
    },
    {
      "comment":"@jens1o This is a great start.  One issue I see for es6 is that it picks up let definitions on method level as class level.  Maybe a filter to not include variable definitions at all, instead just methods, and finally the font would be smaller in order to see more of the overview at one time.  Thanks for contributing.",
      "user":"ilazarte"
    },
    {
      "comment":"@ilazarte you may want to file this issue here: https://github.com/patrys/vscode-code-outline",
      "user":"jens1o"
    },
    {
      "comment":"this is the number 3 most thumbs-up'ed feature request in the github issues list!\r\nand there are duplicate issues open like https://github.com/Microsoft/vscode/issues/14473\r\nkeep mashing that thumbs button :)",
      "user":"mikesmullin"
    },
    {
      "comment":"Everyone has already covered it, but I also use Notepad++ and I also miss having a function list in VSC.\r\nOther than that, I am loving the switch over.",
      "user":"GhostMech"
    },
    {
      "comment":"+1",
      "user":"karolyi"
    },
    {
      "comment":"`Ctrl+Shift+O` is **UGLY**, which will disperse my attention. Since it has supported the code outline, I don't understand why not display in a tree view.",
      "user":"xgfone"
    },
    {
      "comment":"Minimap was actually prioritised over this?",
      "user":"fuzzy76"
    },
    {
      "comment":"+1 for a symbol table, the minimap is useless on smaller screens.",
      "user":"phea"
    },
    {
      "comment":"A **native** outline view is definitely needed. Although the Code Outline plugin provides the functionality in a quite nice way, there are still some issues:\r\n\r\n* The Code Outline plugin responses very slowly when switching between source files, i.e. the Code Outline view takes a  lot of time to update. \r\n\r\n* The Code Outline view cannot be moved freely to other places in VSC. For example, I cannot replace the minimap with the Code Outline view provided by the plugin. Nor can I \"create\" a second side bar holding the Code Outline view, along with the existing side bar.\r\n\r\nPlease consider adding the outline view & functionality to VCS .  Thank you.",
      "user":"xueyunquan"
    },
    {
      "comment":"@xueyunquan FWIW I've made version 0.0.12 much faster.",
      "user":"patrys"
    },
    {
      "comment":"Current outline is flat which is useless with a large files. Also it shows local variables which is extra IMO. If VSCode provided tree-like structure instead of list of everything things would be much better",
      "user":"Yanpas"
    },
    {
      "comment":"@Yanpas Code Outline is a tree. If it's flat it probably means your language does not report proper symbol ranges.",
      "user":"patrys"
    },
    {
      "comment":"@patrys I guess the problem is [api](https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md#textDocument_documentSymbol) limitations:\r\n`SymbolInformation` contains `location` and `containerName` members.\r\n\r\n> location's range doesn't have to denote a node range in the sense of a abstract syntax tree\r\n\r\n> containerName can't be used to re-infer a hierarchy for the document symbols\r\n\r\nThere should be some parent member or something.\r\n\r\nIn fact there are no tree outline for: C#, C++, Haskell and Rust\r\n\r\n----\r\nUPD:\r\nI've added `console.log(\"sym: \", currentNode.symbol.name, currentNode.symbol.location.range)` inside updateSymbols method and here is what I saw : \r\n![_2017-10-30_17-02-29](https://user-images.githubusercontent.com/7345761/32174965-6a473a56-bd94-11e7-8193-fe7531365124.png)\r\n\r\nC++ LSP returns range \"from start of the name to the end\" instread of \"from `{` to `}`\". I guess the same applies to other LSP's which work the same and as a result cannot provide tree-like outline. Is it concrete lsp's bug or lack of information in the standard ?",
      "user":"Yanpas"
    },
    {
      "comment":"I've created an issue here for tree-like symbols https://github.com/Microsoft/language-server-protocol/issues/327",
      "user":"Yanpas"
    },
    {
      "comment":"@patrys Thanks for your reply. I am using 0.0.12, actually. When I switching to another file, especially those not opened recently, it always takes 2~5 seconds to update the outline view. \r\n\r\nAnd as @Yanpas has stated, it does not show a tree structure for C++, as well as C that I use most often. But of course this issue comes from the parser, here both provided by the cpptools plugin developed by MS.",
      "user":"xueyunquan"
    },
    {
      "comment":"+1",
      "user":"derme302"
    },
    {
      "comment":"I appreciate hardwork of @patrys (https://marketplace.visualstudio.com/items?itemName=patrys.vscode-code-outline) and I'm grateful. However I think this should be a native feature of editor.\r\n\r\nI use Nuclide (Atom) for flow and VSCode for Typescript. I find Nuclide's Outline and Context view very useful and polished. I wish everyday VSCode has those as a native feature.\r\n\r\n![screen shot 2017-12-13 at 08 53 52](https://user-images.githubusercontent.com/1497060/33923610-300e5556-dfe3-11e7-89ba-9139eb82a2e6.png)\r\n",
      "user":"ozum"
    },
    {
      "comment":"When is code outline coming out of the box natively? Vs code is the most loved editor now and not having this feature is a bummer.",
      "user":"VenPot"
    },
    {
      "comment":"It would be awesome if symbols were marked on the minimap, for example with a colored bar or fitting icons. Then hover to see details and click to go to symbol.. Alternatively the files in the treeview could be expanded further to reveal symbols. Just brainstorming :)",
      "user":"ViggoV"
    },
    {
      "comment":"Maybe I can add a switch action for minimap to show the tree, but I prefer a new outline view.",
      "user":"saighost"
    },
    {
      "comment":"This is core function for every real editor, VSC should have it. Some basic built-in panel would be indicated, but making a good API for this could result in the creation of great plugins.\r\n\r\nThis really looks great:\r\nhttps://github.com/Microsoft/vscode/issues/5605#issuecomment-351291978\r\n\r\nNotepad++ has built-in function list:\r\nhttps://notepad-plus-plus.org/features/function-list.html\r\nbut I prefer SourceCookifier:\r\nhttp://sourcecookifier.sourceforge.net/\r\n\r\nBasic future should be:\r\n- separate panel for list (not use existing Explorer panel - there are too many things there)\r\n- search box\r\n- working with single file/all open file/all project file (with the possibility of quick change)\r\n- customizable appearance and parsing rules\r\n- supports custom languages",
      "user":"ArkadiuszMichalski"
    },
    {
      "comment":"@ArkadiuszMichalski Thank for great ideas. However, I have some additional thoughts.\r\nIn fact, Ctrl+Shift+O, Ctrl+T and Navigation Pane currently work like a function list in single file/whole project (including search box , too) that can satisfy your first three suggested features in some way.\r\nThere are already some extension out there ([Code outline](https://marketplace.visualstudio.com/items?itemName=patrys.vscode-code-outline) or [Show functions](https://marketplace.visualstudio.com/items?itemName=qrti.funclist)).\r\nI think the symbol tree view can also:\r\n- Highlight the currently selected symbol(s) and all symbols that match/contain the search keyword (by Ctrl+F).\r\n- Display the simplified code structure (especially big switch-case and condition expression).",
      "user":"LeThiHyVong"
    },
    {
      "comment":"Any ETA when we could expect this feature or API? ",
      "user":"NaGeL182"
    },
    {
      "comment":"@NaGeL182 Feel free to do a pr, of course, then it would go to 1.21 ;)",
      "user":"jens1o"
    },
    {
      "comment":"I would love to see this feature added.",
      "user":"johnnymast"
    },
    {
      "comment":"This was proposed about two years ago and apparently had great reception. I was wondering if it's not been classified as a priority (and why) or if I'm just dumb and I can't find it in the docs.",
      "user":"nmaxcom"
    },
    {
      "comment":"> This  was proposed about two years ago and apparently had great reception. I  was wondering if it's not been classified as a priority (and why) or if  I'm just dumb and I can't find it in the docs.\r\n\r\nThink of how long multi-root support has needed to wait ;)\r\n",
      "user":"jens1o"
    },
    {
      "comment":"> Think of how long multi-root support has needed to wait ;)\r\n\r\nExcuse my ignorance, I'm a bit out of touch with the internals of Code. You mean this hasn't been developed for not having multi-root (different projects/folders at once?) support?",
      "user":"nmaxcom"
    },
    {
      "comment":"> You mean this hasn't been developed for not having multi-root (different projects/folders at once?) support?\r\n\r\nno no no... I mean like the feature request for multi-root-support is older than this one and it has been a longer time until that request was implemented.",
      "user":"jens1o"
    },
    {
      "comment":"Geany editor has also a very nice implementation of functions overview. I am attaching a screenshot for reference\r\n![screenshot from 2018-03-13 13-21-44](https://user-images.githubusercontent.com/5047862/37338913-867e8242-26c1-11e8-8e10-fce9107359a1.png)\r\n\r\n\r\n",
      "user":"byron21"
    },
    {
      "comment":"@byron21 I'm not sure that's better than other examples in this thread. It looks primitive and doesn't seem to make use of slightly different icons to help give more information.\r\nWhat are the numbers within the square brackets?",
      "user":"nmaxcom"
    },
    {
      "comment":"The numbers within the square brackets indicate the function declaration line number. I agree with you it looks primitive.",
      "user":"byron21"
    },
    {
      "comment":"I think we should squeeze as much relevant info as possible, preferably in an optional fashion and functionality.\r\n\r\nFor example:\r\n\r\n- show number of lines in that function or piece of code (good way to know where to trim fat or refactor)\r\n- different sorting ways: alphabetic, position in the code, number of lines, by type (function, class etc.), number of TODO's...\r\n- select one or more items and be able to reorder them and maybe even drag and drop through to other documents (simpler code cut and paste)\r\n- a small green dot or similar to indicate not staged/committed code.\r\n\r\nI'll stop saying things or I'll just start repeating what others have said,",
      "user":"nmaxcom"
    },
    {
      "comment":"@dbaeumer will you want this to be a request from the client or a notification from the server or both? Tree-view and Error-panel are the only pieces of always-visible UI in LSP.\r\n\r\nWe run into problems with Atom+Hack because Atom requests the outline view immediately, but the Hack LSP server declines the request during its first 30-60 seconds of initialization, and there's no good way for Atom to know when it should re-issue the request.",
      "user":"ljw1004"
    },
    {
      "comment":"> Hack LSP server declines the request during its first 30-60 seconds of initialization, and there's no good way for Atom to know when it should re-issue the request.\r\n\r\nIf the Hack LS cannot response on this type of request after initialization, it shouldn't claim so (i.e. register this capability) and use dynamic capabilities registration instead. Although I'm not sure it is supported by Atom yet, but it's a matter of time. ",
      "user":"laughedelic"
    },
    {
      "comment":"@laughedelic Does that amount to saying that the standard error code `ServerNotInitialized` shouldn't be used?",
      "user":"ljw1004"
    },
    {
      "comment":"@ljw1004 I'm not sure I understand it. From the [LSP spec](https://microsoft.github.io/language-server-protocol/specification#initialize):\r\n\r\n> Until the server has responded to the `initialize` request with an `InitializeResult`, the client must not send any additional requests or notifications to the server.\r\n\r\nWhat I see in Atom is a spinning progress indicator in the outline panel while server is initializing. Once it's ready the client sends the outline request (not before that), gets a response and shows it in the panel. ",
      "user":"laughedelic"
    },
    {
      "comment":"This is a must have...",
      "user":"Legends"
    },
    {
      "comment":"I'm probably moving against the tide here, I do not think this is a good feature request. Why?\r\n\r\nOne of the reasons I switched to VSCode was its *light* nature. Feature creep will turn a good editor into another IDE. If those other editors are so great, e.g. Eclipse, why not use that editor? Oh yeah, that's right, people don't use those because they buckle under their own weight. \r\n\r\n\r\n",
      "user":"ChickJ"
    },
    {
      "comment":"I think this should be part of VsCode core or at least as an extension...",
      "user":"Legends"
    },
    {
      "comment":"> or at least as an extension...\r\n\r\nThere is one: https://marketplace.visualstudio.com/items?itemName=patrys.vscode-code-outline",
      "user":"jens1o"
    },
    {
      "comment":"@jens1o It says: \r\n\r\n> JavaScript | Comes with VS Code\r\n\r\nYou mean ctrl+shift+o ?\r\nI don't like it....\r\n\r\n",
      "user":"Legends"
    },
    {
      "comment":"No, please read the description. It only says the extension does not depend on external extensions so it can gather all symbols. It basically reads out the data that the language servers are giving.\r\n\r\nJust try it out.",
      "user":"jens1o"
    },
    {
      "comment":"It's not perfect, but it helps.  Perhaps it would be nice to have it as a pane on the right/left side.\r\nOtherwise you have to fadein the project explorer and then fadeout the \"code outline\", everytime you want to look for a function.\r\nA bit cumbersome...",
      "user":"Legends"
    },
    {
      "comment":"I think this would be better an option for users or just a plugin, the editor would be bloated if you added this kind of feature. There is **visual studio** if you need full pledge IDE though... Probably I need to transfer back now to Emacs or Vim as it is more lightweight.",
      "user":"ffimnsr"
    },
    {
      "comment":"@laughedelic Thanks for the clarification. I hadn't been thinking right about this.",
      "user":"ljw1004"
    },
    {
      "comment":"I would like to have the symbols in place of the minimap.  I frequently view multiple files in splits and being able to see the symbols for those files at the same time would be great.",
      "user":"granteagon"
    },
    {
      "comment":"Actually I prefer something like \"go to anything\" where you type something (can be a symbol, a file or any command) and it aggregates all results in a single place.\r\n\r\nJust like [IntelliJ](https://www.jetbrains.com/help/idea/searching-everywhere.html)'s tapping `Shift` twice.",
      "user":"seamlik"
    },
    {
      "comment":"![image](https://user-images.githubusercontent.com/11234139/39087239-787e44ec-459e-11e8-9216-1768745b1355.png)\r\nOne :+1: missing!\r\n\r\n(sorry 4 spam bros)",
      "user":"jens1o"
    },
    {
      "comment":"FYI, the latest release (0.2.0) of https://marketplace.visualstudio.com/items?itemName=patrys.vscode-code-outline does a great job with this now.  It doesn't implement everything in the screenshots above but I find it quite usable.  I'm using with golang, I guess YMMV.",
      "user":"boyvinall"
    },
    {
      "comment":"The extension works great, but the fact that it can't be moved to the rigth column is an immediate no go for me (and probably most people).",
      "user":"milesj"
    },
    {
      "comment":"One option though is to move the entire Workbench to the right like so:\r\n`\"workbench.sideBar.location\": \"right\"`\r\n\r\nWhich is probably a good idea regardless if your first language reads L->R as then the brain naturally reads that way and thus your most important stuff (your code!) is first thing on the left side of the screen. It takes getting used to just because it's a change though.",
      "user":"onetrev"
    },
    {
      "comment":"Tried vscode-code-outline:  Not bad at all!",
      "user":"jfcarr"
    },
    {
      "comment":"Tried 'patrys.vscode-code-outline'. Didn't work for me at all. Always shows empty box (tried refresh, re-install etc). That, and also, I wanted to see it on the *right*. It is very disturbing to see where it shows up now.\r\n",
      "user":"fractalspace"
    },
    {
      "comment":"Hopefully being implemented this month. It's a planned item! #49327 ",
      "user":"gulshan"
    },
    {
      "comment":"patrys.vscode-code-outline worked great for me, but for about a week now it has disappeared and no matter what I do, I can't seem to get it back...",
      "user":"Brent-Knigge"
    },
    {
      "comment":"@Brent-Knigge It now has a separate panel. On the left you should see a new icon below which is for the code-outline view. \r\n\r\n![image](https://user-images.githubusercontent.com/29309408/39972659-3226d770-56e2-11e8-94cf-8266cb6d2d23.png)\r\n",
      "user":"dtromans"
    },
    {
      "comment":"@faintsignal thanks.  I see it plain as day now - don't know why I didn't see it before.  But then again, I'm like that when I open the fridge...",
      "user":"Brent-Knigge"
    },
    {
      "comment":"@faintsignal \r\nanyway to change it back into the explorer view? that activity bar takes up too much horizontal space >,>\r\n\r\n**Edit:**  i found it out\r\nhttps://github.com/patrys/vscode-code-outline/issues/120\r\n\r\n> \r\n> open package.json of the extension and change\r\n> \r\n>     \"views\": {\r\n>     \"outline\": [\r\n>     {\r\n>     \"id\": \"symbolOutline\",\r\n> \r\n> in\r\n> \r\n>     \"views\": {\r\n>     \"explorer\": [\r\n>     {\r\n>     \"id\": \"symbolOutline\",\r\n> \r\n> this worked for me",
      "user":"BuckyLuis"
    },
    {
      "comment":"Good news: I have merged https://github.com/Microsoft/vscode/pull/49917 which means next insiders will ship with an outline. It is a  *preview*, not yet finished and *not yet enabled* by default. \r\n\r\n**How to enable the outline preview?**\r\n\r\nAll you need to do is select 'Outline' in the explorer view context menu: \r\n\r\n<img width=\"355\" alt=\"screen shot 2018-05-16 at 08 46 51\" src=\"https://user-images.githubusercontent.com/1794099/40100979-3bb604cc-58e6-11e8-813a-9502306ce172.png\">\r\n\r\n**Note** that there are many ideas and expectations where to show the outline view. We started by thinking about what to show and because of that the outline view currently sits in the explorer view. Alternative locations are being discussed here: https://github.com/Microsoft/vscode/issues/49923 and as usually everyone is invited to join the discussion. \r\n\r\n**What does it already do?**\r\n\r\nThe outline is far from finished but these are the features we support in the first round:\r\n\r\n* Show the symbol structure of the currently active editor\r\n* Show label, icon, and the default open gestures: (1) single click to reveal, (2) double click to reveal and focus, (3) alt+click to reveal to the side, (4) alt+double click to reveal and focus to the side, (5) enter to reveal and focus a symbol. \r\n* Sorting symbols: (1) by the position the document, (2) the name, and (3) their type\r\n* A 'follow cursor' feature which reveals the symbol matching the current editor selection\r\n* An unbound command `outline.focus` (you need to define your own keybinding for now) that moves focus to the outline\r\n* Support type to filter - it will hide items that don't match and pre-select the best match\r\n\r\n<img width=\"535\" alt=\"screen shot 2018-05-16 at 09 10 48\" src=\"https://user-images.githubusercontent.com/1794099/40101911-3b1b0190-58e9-11e8-9475-bce3c1452a28.png\">\r\n\r\n**What's next?**\r\n\r\nWe have read through the comments here and looked at other outline implementation. We track further work with the `outline`-label (https://github.com/Microsoft/vscode/labels/outline) and we invite everyone to join the discussion. We expect to get closer to done, done in June - it'll be June because I'll be OOO for the rest of May.\r\n",
      "user":"jrieken"
    },
    {
      "comment":"@jrieken will this outline view be a generic view that other language plugins could build upon?",
      "user":"ringods"
    },
    {
      "comment":"The data it shows comes from extensions - it currently uses the `DocumentSymbolProviders` for that and there is an issue to better support document symbol hierarchies: #34968. So, that data defines what we show and while we don't expose our UX/view models to extensions there are ideas allowing to add commands, e.g allow for contributable context menu commands, see #49925",
      "user":"jrieken"
    },
    {
      "comment":"@jrieken This looks great! But for those of us that need custom outlines, are all the APIs used by this exposed to us for use in our own tree?",
      "user":"DanTup"
    },
    {
      "comment":"> are all the APIs used by this exposed to us for use in our own tree?\r\n\r\nNo, this is a client feature (like all of our UX features) and doesn't use the extension API. ",
      "user":"jrieken"
    },
    {
      "comment":"In the name of GH issue manageability (this issue takes aged to load) I am closing and locking this. Let's continue the discussions in topic-issues labeled with [`outline`](https://github.com/Microsoft/vscode/labels/outline).\r\n\r\nThanks and Happy Coding!",
      "user":"jrieken"
    }
  ],
  "repository":"vscode",
  "user":"boyvinall"
}