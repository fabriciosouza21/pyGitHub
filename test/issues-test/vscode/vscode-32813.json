{
  "comments":[
    {
      "comment":"I think we should add support for accessing theme's colors programmatically. \r\n\r\nFor instance let's take as an example the popular [OneDark Pro](https://github.com/Binaryify/OneDark-Pro/blob/master/themes/OneDark-Pro.json) theme, I'd like to access colors defined under [tokenColors](https://github.com/Binaryify/OneDark-Pro/blob/master/themes/OneDark-Pro.json#L67).\r\n\r\nMy use case: I'm making an extension that decorates some tokens, and I'd like them to have the same color that comments have in my theme, the problem is that the regex I use to find those tokens depends on some configurable value, so I cannot pre-compute it in advance and just put it in a `.tmLanguage` file.\r\n\r\nIt's already possible to somehow access colors defined under the [colors](https://github.com/Binaryify/OneDark-Pro/blob/master/themes/OneDark-Pro.json#L4) key, via something like `new vscode.ThemeColor ( 'activityBar.background' )`, adding support for this sounds like a useful generalization to me.\r\n\r\nWhat do you think?",
      "user":"fabiospampinato"
    },
    {
      "comment":"I'd rather avoid API that gives out the actual color, but hope that all can be done with color references. That way extensions don't need to worry about listening to theme changes. Yes, sounds like a useful idea but is not an easy addition as token colors are based on text mate theme rules and the text mate scope hierarchy.\r\nIf there are more requests, we can certainly look at it. Until then I recommend you to use one of the regular workbench colors, or - added to 1.16 - define a new color in your extension.",
      "user":"aeschli"
    },
    {
      "comment":"@aeschli while I still think an API for this would be valuable (or at the least an API that tells you if the current theme is light or dark), another alternative that might work in certain scenarios would be to expose the set of theme colors as css variables. This would allow the scenario here: https://github.com/Microsoft/vscode/issues/34411#issue-257879258\r\n\r\nIn theory I could use an SVG image, with colors pulled from the css variables, allowing me to get theme adaptable icons into the hovers.\r\n\r\nThoughts?\r\n\r\nFYI, this is similar to this request https://github.com/Microsoft/vscode/issues/41785, but not just for the webview, for the editor itself.",
      "user":"eamodio"
    },
    {
      "comment":"@eamodio Great idea. If using css variables in SVG images works then we should definitely do this. Let's track this in a separate issue!\r\n",
      "user":"aeschli"
    },
    {
      "comment":"#46940 was closed as a dupe of this, but I'm not sure it's the same request. I have remotely-hosted SVGs I want to include in my markdown tooltips. I need to decide between the black and white versions so need to know whether VS Code considers the current theme light or dark. I don't need access to colours and I cannot modify the SVG.",
      "user":"DanTup"
    },
    {
      "comment":"This issue has come up again. In GitLens, I would like to expose 2 colors (hot and cold versions) for the heatmap that GitLens generates, but I am unable to use theme colors, because I need access to the real color values to generate the full palette of colors required.",
      "user":"eamodio"
    },
    {
      "comment":"A lot of extensions would benefit from this. Bracket colorizer, jumpy, gitlens and a zillion others. Would be good to implement this.",
      "user":"vviikk"
    },
    {
      "comment":"@piggyslasher Please explain how/where these extension could profit from this.\r\n\r\nThere is already a story that extensions can declare a new color (by id) and use it in decorations. Users can redefine these colors in themes.",
      "user":"aeschli"
    },
    {
      "comment":"> My use case: I'm making an extension that decorates some tokens, and I'd like them to have the same color that comments have in my theme, the problem is that the regex I use to find those tokens depends on some configurable value, so I cannot pre-compute it in advance and just put it in a .tmLanguage file\r\n\r\n@aeschli that's my use case. Sure, I'm already exporting these colors via the settings and users can override them already. But I can't just pick the colors for them automatically depending on what theme they are currently using. Also if someone uses one of those extensions for rotating themes I can't just expect them to update their settings every time. ",
      "user":"fabiospampinato"
    },
    {
      "comment":"@aeschli A use case in my scenario is I use the extension called \"Bracket pair colorizer\" with adds colors to matching brackets, like so:\r\n![image](https://user-images.githubusercontent.com/1991125/44261498-73ddde80-a24a-11e8-9aea-eca801478718.png)\r\nNow, in order for the extension to render the brackets to match my theme, I have to hard code the colors into my settings:\r\n\r\n![image](https://user-images.githubusercontent.com/1991125/44261569-a8519a80-a24a-11e8-9e1d-d3705afef803.png)\r\n\r\n\r\nWithout this, I would end up with something that looks like this out of the box:\r\n![image](https://user-images.githubusercontent.com/1991125/44261639-d33bee80-a24a-11e8-99c5-6c83fd6d07e0.png)\r\n\r\nNotice the color of the brackets. They're from the extension's default preferences because the developer can't access the colors. I hope I'm on the right track.",
      "user":"vviikk"
    },
    {
      "comment":"@piggyslasher Did you see that you can define new colors in the extension's package.json?\r\n```json\r\n\"contributes\": {\r\n  \"colors\": [{\r\n      \"id\": \"bracketPairColorizer.bracket1\",\r\n      \"description\": \"Color for the outermost bracket\",\r\n      \"defaults\": {\r\n          \"dark\": \"#112233\",\r\n          \"light\": \"#ddeeff\",\r\n          \"highContrast\": \"foreground\"\r\n      }\r\n  }]\r\n}\r\n```\r\n\r\nUsers can then customize the color in the `workspace.colorCustomization` setting and even themes can add a default color.\r\n\r\nColor default values can be defined for light, dark and high contrast theme and can either be a reference to an existing color or a color hex value.\r\n\r\n",
      "user":"aeschli"
    },
    {
      "comment":"Hi,\r\nI am working on a PR for ![LaTeX-Workshop](https://github.com/James-Yu/LaTeX-Workshop), a VSCode extension for LaTeX editing. In the PR, I make a latex preview in hover available rendering math equations in SVG format with MathJax and embedding the dataurl of generated SVG into a markdown text as an image source. \r\n\r\nWhen rendering math equations, I have to tell MathJax which color to use for each rendering. Otherwise rendered equations are invisible on a certain theme.  To work around the lack of color API in VSCode, I have to render equations in a WebView process, not in an extension process because we can know colors form css variables in the WebView process, as suggested by @eamodio. So when LaTeX-Workshop users close a WebView pane, my PR does not work. For LaTeX-Workshop users, opening a WebView pane as a pdf viewer is a usual thing. So the lack of color api seems to be a minor thing.\r\n\r\nHowever, the same can be said for other documents having TeX-like equations. Docstring in python, for example. Let's think about API documents with math equations written in docstring. Python libraries should have tons of such API documents. If we want to render equations in them with MathJax, and to display them with API documents in hover, the same problem happens. And, for python programmers while coding, opening a WebView pane is an unusual thing. \r\n\r\nPlease notice that, for this purpose, extensions don't have to listen to theme changes. Equations are dynamically rendered each time. MathJax is enough fast to do that.\r\n\r\nRegards,\r\n\r\nOn a light theme.\r\n\r\n![oct-13-2018 10-46-17](https://user-images.githubusercontent.com/10665499/46900058-027f7c80-ced7-11e8-89aa-cfbdcc942098.gif)\r\n\r\nOn a dark theme.\r\n\r\n![oct-13-2018 10-48-16](https://user-images.githubusercontent.com/10665499/46900064-0c08e480-ced7-11e8-9286-8a727d3d94b9.gif)\r\n",
      "user":"tamuratak"
    },
    {
      "comment":"@aeschli Unfortunately that doesn't allow the colours to be used outside of the vscode API. üòû ",
      "user":"Gruntfuggly"
    },
    {
      "comment":"@aeschli can you provide a reference for this? I feel like it might solve the @vviikk issue (which I'm also having) but I'm not sure I understand your suggestion.\r\n\r\nBasically you're suggesting to use \r\nthese? https://code.visualstudio.com/api/references/theme-color",
      "user":"amueller"
    },
    {
      "comment":"Yes, ideally you use one of the existing colors, or define a new color id (see https://github.com/Microsoft/vscode/issues/32813#issuecomment-414227205) to allow users to theme your color as well.\r\nI know that there are still many gaps with this story, Colors in hover, computed colors...",
      "user":"aeschli"
    },
    {
      "comment":"If I understand correctly.\r\n\r\nUser defines a css color as `editor.foreground`\r\n\r\nI need to do a lookup to `workbench.colorCustomizations` to retrieve the css value\r\n\r\nHowever if I do `vscode.workspace.getConfiguration(\"workbench.colorCustomizations\", undefined);`\r\n\r\nI get only the user defined settings. Is there I way I can get the flattened settings including all the theme colors. (e.g. if user did not specify a custom `editor.foreground`)",
      "user":"CoenraadS"
    },
    {
      "comment":"No, you can not look up a color, that's the API that's missing.\r\nBut you can reference a color by using `new ThemeColor('editor.foreground')` in certain APIs (status bar, decorators)",
      "user":"aeschli"
    },
    {
      "comment":"Aah that's the missing link. Awesome üëç I think it works now",
      "user":"CoenraadS"
    },
    {
      "comment":"I found a way to abuse the WebView to find out whether the theme is Dark or Light. It's a huge hack, but I need to know whether to use light/dark icons and there's no API, so...\r\n\r\nIt returns a promise with an enum of the theme:\r\n\r\n```\r\ndetectTheme(context.subscriptions).then((theme) => {\r\n\tif (theme === Theme.Dark) {\r\n\t\tconsole.log(\"Using Dark theme!\");\r\n\t} else if (theme === Theme.Light) {\r\n\t\tconsole.log(\"Using Light theme!\");\r\n\t} else if (theme === Theme.HighContrast) {\r\n\t\tconsole.log(\"Using High Contrast theme!\");\r\n\t} else {\r\n\t\tconsole.log(\"Failed to parse theme\");\r\n\t}\r\n});\r\n```\r\n\r\nIt'll automatically resolve with Unknown after a second, in case something has gone wrong. `theme_detector.ts` looks like this:\r\n\r\n```ts\r\nimport * as vs from \"vscode\";\r\n\r\nexport enum Theme {\r\n\tUnknown,\r\n\tDark,\r\n\tLight,\r\n\tHighContrast,\r\n}\r\n\r\nexport function detectTheme(disposables?: vs.Disposable[]): Promise<Theme> {\r\n\treturn new Promise((resolve) => {\r\n\t\tlet panel = createPanel();\r\n\t\tconst messageHandler = (bodyCssClass?: string) => {\r\n\t\t\tif (panel) {\r\n\t\t\t\tpanel.dispose();\r\n\t\t\t\tpanel = undefined;\r\n\t\t\t}\r\n\t\t\tresolve(bodyCssClass ? parseClass(bodyCssClass) : Theme.Unknown);\r\n\t\t};\r\n\r\n\t\t// After a second, just resolve as unknown.\r\n\t\tsetTimeout(() => messageHandler(), 1000);\r\n\r\n\t\tpanel.webview.onDidReceiveMessage(\r\n\t\t\tmessageHandler,\r\n\t\t\tundefined,\r\n\t\t\tdisposables,\r\n\t\t);\r\n\t\tpanel.webview.html = themeDetectorScript;\r\n\t});\r\n}\r\n\r\nconst themeDetectorScript = `<html><body><script>\r\n\t(function() {\r\n\t\tconst vscode = acquireVsCodeApi();\r\n\t\tvscode.postMessage(document.body.className);\r\n\t})();\r\n</script></body></html>`;\r\n\r\nfunction createPanel() {\r\n\treturn vs.window.createWebviewPanel(\r\n\t\t\"theme-detector\",\r\n\t\t\"\",\r\n\t\t{\r\n\t\t\tpreserveFocus: true,\r\n\t\t\tviewColumn: vs.ViewColumn.Beside,\r\n\t\t},\r\n\t\t{\r\n\t\t\tenableScripts: true,\r\n\t\t\tlocalResourceRoots: [],\r\n\t\t},\r\n\t);\r\n}\r\n\r\nfunction parseClass(bodyCssClass: string): Theme {\r\n\tif (bodyCssClass && bodyCssClass.indexOf(\"vscode-dark\") !== -1) {\r\n\t\treturn Theme.Dark;\r\n\t} else if (bodyCssClass && bodyCssClass.indexOf(\"vscode-light\") !== -1) {\r\n\t\treturn Theme.Light;\r\n\t} else if (bodyCssClass && bodyCssClass.indexOf(\"vscode-high-contrast\") !== -1) {\r\n\t\treturn Theme.HighContrast;\r\n\t} else {\r\n\t\treturn Theme.Unknown;\r\n\t}\r\n}\r\n```\r\n\r\nI don't take any responsibility if you decide to use this, it could be fragile, but since I wrote it I thought I'd share it. I only need the theme, but you should be able to tweak the support extracting colours.\r\n\r\nNote: It doesn't do any detection of the theme changing, so you may not want to hold onto the result for too long. Though there is also a visible flicker of the window and it could take up to a second to fail, so you might also not want to call it too much.",
      "user":"DanTup"
    },
    {
      "comment":"Can we initialize a ThemeColor based on a \"scope\" value?  For example, if our extension wants to add text decorations based on the theme's setting for the \"comment\" scope, is it possible?\r\n\r\nFor the C++ extension, we essentially want to color the code based on our own language service's information instead of TextMate grammars which are not capable of classifying user-defined types correctly.",
      "user":"bobbrow"
    },
    {
      "comment":"> Can we initialize a ThemeColor based on a \"scope\" value?\r\n\r\n@bobbrow That's currently not possible",
      "user":"aeschli"
    },
    {
      "comment":"I'm plus oneing @bobbrow's comment. We need the same thing for the Python Extension. We host the monaco editor in our 'Python Interactive' window and we have no way to get the colors for different scopes. Currently we have a hack of trying to find the current theme's json on disk.",
      "user":"rchiodo"
    },
    {
      "comment":"The PDF previewer in LaTeX Workshop could benefit from knowing if the current theme is dark or light in order to decide whether to invert or not the background and foreground colors. In general, I believe the light/dark state is an important piece of information to expose.",
      "user":"memeplex"
    },
    {
      "comment":"I +1000 this one. My use case is that in Clojure there are three types of comments:\r\n\r\n1. Line based, rest of line after a `;`.\r\n2. The `(comment)` function, returning `nil` whatever you pass it.\r\n3. The ignore reader token, `#_` resulting in that the reader skips the whole form following it.\r\n\r\nThese are often used differently, with `; comment` being the way to just comment something, `(comment)` to keep test code in the file, and `#_` to disable chunks of code.\r\n\r\nTo support this use I'm rendering the `(comment foo)` and `#_` stuff  as dimmed, with intact syntax highlighting. But some users want those to be rendered the same as line based comments. Which I can't do, since I can't find the theme color value of comments.\r\n\r\nNote that I can't solve this with `tmLanguage` grammar, because dimming can't be done that way.",
      "user":"PEZ"
    },
    {
      "comment":"Here's another annoyance with not knowing if the theme is light or dark... Terminal ansi colours...\r\n\r\nI had some code that used Grey and White in stack traces so that users own code frames was more visible (white) than framework code (grey). I tested it with both light and dark themes and found that the White ansi color codes produce a dark color in the themes (great!).\r\n\r\nWell, until a user with a third party theme found that I was showing white text on a light background üòû\r\n\r\nI figured I could raise this as a bug against their theme, however I failed to find any guidance on how themes should handle these, though I did found that in the VS Code code, [ansiWhite is inverted for light/dark theme](https://github.com/microsoft/vscode/blob/8dd111f8c4c3a4648f5e8959ca9ffe51fdf206fd/src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts#L97-L104) but [`ansiBlack` is not](https://github.com/microsoft/vscode/blob/8dd111f8c4c3a4648f5e8959ca9ffe51fdf206fd/src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts#L41-L48) which leaves me more confused.",
      "user":"DanTup"
    },
    {
      "comment":"Came here via @DanTup - I'm trying to write a VS Extension to sync your color theme to Windows Terminal, but this bug blocks it. This information is available internally (via \"Generate Color Theme from Current Settings\"), but I have no sane access to it",
      "user":"anaisbetts"
    },
    {
      "comment":"@anaisbetts I‚Äôve done this before. It‚Äôs not exactly sane but it worked for me at the time.\r\n\r\n```typescript\r\nconst getTokenColorsForTheme = (themeName: string): TokenColors => {\r\n  const tokenColors = new Map();\r\n  let currentThemePath;\r\n  for (const extension of extensions.all) {\r\n    const themes = extension.packageJSON.contributes && extension.packageJSON.contributes.themes;\r\n    const currentTheme = themes && themes.find((theme) => theme.id === themeName);\r\n    if (currentTheme) {\r\n      currentThemePath = path.join(extension.extensionPath, currentTheme.path);\r\n      break;\r\n    }\r\n  }\r\n  const themePaths = [];\r\n  if (currentThemePath) { themePaths.push(currentThemePath); }\r\n  while (themePaths.length > 0) {\r\n    const themePath = themePaths.pop();\r\n    const theme = require(themePath);\r\n    if (theme) {\r\n      if (theme.include) {\r\n        themePaths.push(path.join(path.dirname(themePath), theme.include));\r\n      }\r\n      if (theme.tokenColors) {\r\n        theme.tokenColors.forEach((rule) => {\r\n          if (typeof rule.scope === \"string\" && !tokenColors.has(rule.scope)) {\r\n            tokenColors.set(rule.scope, rule.settings);\r\n          } else if (rule.scope instanceof Array) {\r\n            rule.scope.forEach((scope) => {\r\n              if (!tokenColors.has(rule.scope)) {\r\n                tokenColors.set(scope, rule.settings);\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return tokenColors;\r\n}\r\n```\r\n\r\nwhere\r\n\r\n```typescript\r\ntype TokenColors = Map<string, TokenColorSettings>\r\n\r\ninterface TokenColorSettings {\r\n  background?: string\r\n  fontStyle?: string\r\n  foreground?: string\r\n}\r\n```",
      "user":"paulyoung"
    },
    {
      "comment":"Usage:\r\n```typescript\r\nconst themeName: string | undefined = workspace.getConfiguration(\"workbench\").get(\"colorTheme\");\r\nconst tokenColors = getTokenColorsForTheme(themeName);\r\n```",
      "user":"paulyoung"
    },
    {
      "comment":"@paulyoung Thanks for the solution! pretty hacky but it worked for me",
      "user":"kufii"
    },
    {
      "comment":"This is a proposal for accessing the current workbench colors\r\n\r\n```ts\r\n\t/**\r\n\t * Represents a color theme kind.\r\n\t */\r\n\texport enum ColorThemeKind {\r\n\t\tLight = 1,\r\n\t\tDark = 2,\r\n\t\tHighContrast = 3\r\n\t}\r\n\r\n\t/**\r\n\t * Represents a color theme.\r\n\t */\r\n\texport interface ColorTheme {\r\n\r\n\t\t/**\r\n\t\t * The kind of this color theme: light, dark or high contrast.\r\n\t\t */\r\n\t\treadonly kind: ColorThemeKind;\r\n\r\n\t\t/**\r\n\t\t * The id of the color theme. This corresponds to the value used in the `workbench.colorTheme` setting.\r\n\t\t */\r\n\t\treadonly id: string;\r\n\r\n\t\t/**\r\n\t\t * Get the color value for a color identifier.\r\n\t\t *\r\n\t\t * @param colorIdentifier A color identifier as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference\r\n\t\t * or contributed by an extension.\r\n\t\t * @return The color as defined by the theme or in the color defaults. If the color identifier is\r\n\t\t * unknown, `undefined` is returned.\r\n\t\t */\r\n\t\tgetColor(colorIdentifier: ThemeColor): Color | undefined;\r\n\t}\r\n\r\n\texport namespace window {\r\n\t\t/**\r\n\t\t * The currently active color theme as configured in the settings. The active\r\n\t\t * theme can be changed via the `workbench.colorTheme` setting.\r\n\t\t */\r\n\t\texport let activeColorTheme: ColorTheme;\r\n\r\n\t\t/**\r\n\t\t * An [event](#Event) which fires when the active theme changes.\r\n\t\t */\r\n\t\texport const onDidChangeActiveColorTheme: Event<ColorTheme>;\r\n\t}",
      "user":"aeschli"
    },
    {
      "comment":"I'm not sure why that API is needed? All of those colors are available in the root CSS for a webview?\r\n\r\nWhat we really want is the token colors, not the CSS colors.",
      "user":"rchiodo"
    },
    {
      "comment":"Token colors are coming too. I've just added the first implementation for https://github.com/microsoft/vscode/issues/77133 and once that has settled I'll propose something like\r\n\r\n```ts\r\nfunction getTokenStyle(type: string, modifiers: string[]): TokenStyle;\r\n\r\ninterface TokenStyle {\r\n   foreground: Color:\r\n   bold: boolean:\r\n   italics: boolean:\r\n   underline: boolean;\r\n} \r\n```",
      "user":"aeschli"
    },
    {
      "comment":"Would onDidChangeActiveColorTheme() fire when colors are changed by settings that override theme colors?  (i.e. editor.tokenColorCustomizations).  \r\n\r\n",
      "user":"Colengms"
    },
    {
      "comment":"@Colengms Yes",
      "user":"aeschli"
    },
    {
      "comment":"@APerricone for Webviews you can use the vscode css vars in your css. Like I do here: https://github.com/BetterThanTomorrow/calva/tree/master/assets/styles",
      "user":"PEZ"
    },
    {
      "comment":"@PEZ sorry, i saw the documentation 5 minutes after the comment, so I removed the comment...\r\nThank you anyway.",
      "user":"APerricone"
    },
    {
      "comment":"Any ETA of this moving from proposed state to stable?",
      "user":"usernamehw"
    },
    {
      "comment":"The APIs to get the theme kind (light / dark / hc) is now made public API.\r\nThis should help with selecting the corresponding images in hovers.",
      "user":"aeschli"
    },
    {
      "comment":"Only kind? Not the getting color value from id as in https://github.com/microsoft/vscode/issues/32813#issuecomment-558242506?",
      "user":"usernamehw"
    },
    {
      "comment":"Im creating an extension and I added an Icon to my webview panel but I currently can't change its color depending on the Color Theme. Couldn't you allow me to use an SVG with a fill color using a VSCode CSS property? or do the same as it happens to the \"editor/title\" button.\r\n\r\nFor the SVG suggestion I could do this (I tested and it does not work):\r\n\r\n```\r\n<path fill=\"var(--vscode-class)\"></path>\r\n```\r\n\r\nFor the editor menu I can switch the icons using the Manifest, like show below. But the icon for the Panel I could not. it would be great if the panel had two properties too somewhere or use at least the same icons from command.\r\n\r\nHere you can see that the Panel Icon and Editor Icon have different colors \r\n![image](https://user-images.githubusercontent.com/55927613/85594001-ecb7d980-b61d-11ea-8273-e0a2d596af7c.png)\r\n\r\nWhile here they both have the same colors.\r\n![image](https://user-images.githubusercontent.com/55927613/85594047-f80b0500-b61d-11ea-8d09-3f8a8c5163c9.png)\r\n\r\n```json\r\n\"contributes\": {\r\n    \"commands\": [\r\n      {\r\n        \"command\": \"YOUR_COMMAND\",\r\n        \"title\": \"COMMAND TITLE\",\r\n        \"icon\": {\r\n          \"light\": \"/.images/icon2.png\",\r\n          \"dark\": \"/.images/icon2.png\"\r\n        }\r\n      }\r\n    ],\r\n    \"menus\": {\r\n      \"editor/title\": [\r\n        {\r\n          \"command\": \"YOUR_COMMAND\",\r\n          \"alt\": \"markdown.showPreviewToSide\",\r\n          \"group\": \"navigation\"\r\n        }\r\n      ]\r\n    }\r\n}\r\n```",
      "user":"AllanOricil"
    },
    {
      "comment":"I'm not knowledgeable about webviews, but from reading https://github.com/microsoft/vscode/pull/54912 also web view icons support light and dark variants. If that's not good enough, can you file a new issue against web views?",
      "user":"aeschli"
    },
    {
      "comment":"> I'm not knowledgeable about webviews, but from reading #54912 also web view icons support light and dark variants. If that's not good enough, can you file a new issue against web views?\r\n\r\nBut the doc does not say how to do it. ",
      "user":"AllanOricil"
    },
    {
      "comment":"@mjbvz Can you help @AllanOricil ?",
      "user":"aeschli"
    },
    {
      "comment":"@AllanOricil `WebviewPanel.iconPath` takes a `dark` and `light` icon variant: https://github.com/microsoft/vscode/blob/fa55787dbc15086031e596b7da434644878a2add/src/vs/vscode.d.ts#L6873",
      "user":"mjbvz"
    },
    {
      "comment":"> @AllanOricil `WebviewPanel.iconPath` takes a `dark` and `light` icon variant:\r\n> \r\n> https://github.com/microsoft/vscode/blob/fa55787dbc15086031e596b7da434644878a2add/src/vs/vscode.d.ts#L6873\r\n\r\nThanks @aeschli  and @mjbvz !!!!\r\nI was using this Doc https://code.visualstudio.com/api/references/vscode-api",
      "user":"AllanOricil"
    },
    {
      "comment":"For one particular use case -- I would love to use this in an extension I'm working to provide completions for webview colors, so that I could show the user's current color in the completion items.",
      "user":"connor4312"
    },
    {
      "comment":"I still want it to make more of the GitLens blame annotations themeable -- since `gutterIconPath` isn't themeable today, so I need to generate svgs with specific colors. But if I could read a theme color, then I could use that value to re-generate the SVGs",
      "user":"eamodio"
    },
    {
      "comment":"I found another use case. Imagine i have an extension that locally serves a page, so the user can work in a separate window. Now imagine I changed theme inside Vscode, how can I notify the local server the theme has been changed, so I can also apply the new theme on the page? I cant. There should be an event we can hook somewhere to get the new theme that was applied.",
      "user":"AllanOricil"
    },
    {
      "comment":"My personal use case would be setting my rooms Philips Hue lights coloring according to my current vsc themes colors when I open vscode :) That would be neat, altough achievable by hardcoding if the theme is not changed too often.",
      "user":"akukettunen"
    },
    {
      "comment":"I want to generate svg diagrams representing inline regular expressions, and want to use the theme colors for elements of the generated illustration.",
      "user":"duncanbeevers"
    },
    {
      "comment":"@duncanbeevers In this case you can in the same way I did in [https://github.com/APerricone/vscode-regexper-unofficial](https://github.com/APerricone/vscode-regexper-unofficial).\r\nSimply use the css variables [https://code.visualstudio.com/api/extension-guides/webview#theming-webview-content](https://code.visualstudio.com/api/extension-guides/webview#theming-webview-content)",
      "user":"APerricone"
    },
    {
      "comment":"> My personal use case would be setting my rooms Philips Hue lights coloring according to my current vsc themes colors when I open vscode :) That would be neat, altough achievable by hardcoding if the theme is not changed too often.\r\n\r\n@akukettunen that would be cool haha",
      "user":"AllanOricil"
    },
    {
      "comment":"I created a solution/hack for grabbing the theme colors.\r\n\r\nCreate a webview with this html\r\n````html\r\n<script>\r\n  const vscode = acquireVsCodeApi();\r\n  vscode.postMessage(Object.values(document.getElementsByTagName('html')[0].style).map(\r\n    (rv) => {\r\n      return {\r\n        [rv]: document\r\n          .getElementsByTagName('html')[0]\r\n          .style.getPropertyValue(rv),\r\n      }\r\n    }\r\n  ));\r\n</script>\r\n````\r\nThen listen to theme changes to spawn that webview every time the user changes his theme. The webview is automatically closed after posting a message with all the theme colors.\r\n````js\r\nvscode.window.onDidChangeActiveColorTheme( () => {\r\n  //create an empty webview\r\n  myEmptyWebview.onDidReceiveMessage((colors)=>{\r\n    //do something with the css root colors\r\n    webviewpanel.dispose();//dispose this webview as we are not using it.\r\n  })\r\n})\r\n````\r\n\r\nthis is the `colors` array\r\n\r\n![image](https://user-images.githubusercontent.com/55927613/111038770-98aa8a80-8422-11eb-99b2-eaa707be82c7.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "user":"AllanOricil"
    },
    {
      "comment":"I would like to get access to these css variables that are added to the Webview. Is there anybody who could point me out where the css variables are injected to the webview?",
      "user":"AllanOricil"
    },
    {
      "comment":"This is really useful enhancement for us. We are building a Language server for our Programming language where in the server returns the tokens in standard format. There are themes which provide coloring information for the tokens and some dont. We wanted to access the current theme information through VSCode API and apply coloring for those tokens using the same. If no information found in the theme we would like to apply our own syntax coloring based on the kind of theme (Dark/Light/High Contrast). \r\n\r\nBut it is disappointing to see this enhancement still open despite many number of votes and many requests. May be i am missing something.",
      "user":"sunnypav"
    },
    {
      "comment":"@sunnypav Have you looked at the semantic highlighting API? This allows you to return tokens with a semantic token type, and we do all the coloring based on the current theme.\r\n\r\nWe don't want to surface TextMate scopes in our API, that's why this an API that returns all syntax colors is not on the radar.\r\nWe can give out some base colors ('comments', 'strings'...) or maybe colors for semantic tokens\r\n\r\n\r\n",
      "user":"aeschli"
    },
    {
      "comment":"Any chance we could grab the current theme name in this event? So far as I can tell, there's no way to grab it that's actually synced with `onDidChangeActiveColorTheme`.\r\n\r\nWe can get the workbench color theme Name from `vscode.workspace.getConfiguration().get(\"workbench.colorTheme\");` - but that lags behind the `onDidChangeActiveColorTheme` - it doesn't update when the user is looking at different themes in the Quick Pick, and only changes if the user \"locks in\" the setting.",
      "user":"Oblongmana"
    },
    {
      "comment":"@Oblongmana What would you do with the theme name?",
      "user":"aeschli"
    },
    {
      "comment":"Just to chime in here, our [main use case](https://github.com/pokey/cursorless-vscode/issues/212) is to be able to access theme colors from within svg's specified in a [`contentIconPath`](https://code.visualstudio.com/api/references/vscode-api#ThemableDecorationAttachmentRenderOptions).  I think there are two issues that would need to be solved here somehow:\r\n\r\n- The css variables mentioned in [the docs](https://code.visualstudio.com/api/extension-guides/webview#theming-webview-content) would need to be enabled in the main editor, not just in a webview\r\n- Even if they were accessible, svg's specified by a uri in the `content` of a css `:after` [can't access css variables](https://stackoverflow.com/a/21882857), so we'd need some fix there.  Looks like maybe using `mask` could work?",
      "user":"pokey"
    },
    {
      "comment":"@aeschli I don't think the semantic highlighting API is mature enough yet. For example, `DocumentSemanticTokensProvider` would keep asking for new tokens even though not much has happened to the file, and if you refuse to provide new tokens, all previous highlighting would be removed (wtf?). And it's almost impossible to calculate the diff and devise new tokens (see https://github.com/microsoft/vscode/issues/115038).\r\n\r\nJUST GIVE US THOSE COLORS!!!",
      "user":"banacorn"
    },
    {
      "comment":"@AllanOricil does the webview workaround still work? It seems style properties have empty properties on my test host\r\n<img src=\"https://user-images.githubusercontent.com/20136533/135888128-018d01b7-59cc-4a37-b8a0-2cf5829e0888.png\" height=\"300px\" />\r\n",
      "user":"slhsxcmy"
    },
    {
      "comment":"> @AllanOricil does the webview workaround still work? It seems style properties have empty properties on my test host <img alt=\"\" height=\"300px\" src=\"https://user-images.githubusercontent.com/20136533/135888128-018d01b7-59cc-4a37-b8a0-2cf5829e0888.png\">\r\n\r\nWell, I hope it still works, because there is no other way to do it. I will test it again and share the results with you later",
      "user":"AllanOricil"
    },
    {
      "comment":"My extension is still working. Maybe you are using that new webview approach which spawns inside an iframe? ",
      "user":"AllanOricil"
    },
    {
      "comment":"> My extension is still working. Maybe you are using that new webview approach which spawns inside an iframe?\r\n\r\nMaybe :) I'm new to webview so I'll look into that more. Do you have an example of your extension using the webview approach? Thanks!",
      "user":"slhsxcmy"
    },
    {
      "comment":"> > My extension is still working. Maybe you are using that new webview approach which spawns inside an iframe?\r\n> \r\n> Maybe :) I'm new to webview so I'll look into that more. Do you have an example of your extension using the webview approach? Thanks!\r\n\r\nYou can study what I did to get the colors in this [link](https://github.com/AllanOricil/vscode-salesforce-query-editor/blob/master/src/soql-editor/fetch-colors-webview.js)",
      "user":"AllanOricil"
    },
    {
      "comment":"Please correct me if I'm wrong, but this thread is focusing in the problem from an extension developer perspective, now isn't it the same for the end user? AFAIK in `editor.tokenColorCustomizations` there is no way to say something like \"the current fg color for keyworks\" or any of the colors defined in https://code.visualstudio.com/api/references/theme-color. It was mentioned above a number of times that an extension developer can define colors that then the user may customize, but the user can't customize even base colors without hardcoding them in a way that's not relative to the current theme (which may and often changes during a session). Some months ago the ability to define customizations for several themes at once (including a new wildcard syntax) was added, but the underlying problem of not being able to reference theme attributes (mostly but not only colors) by symbolic names still makes it very hard to maintain customizations beyond two or three themes.",
      "user":"memeplex"
    },
    {
      "comment":"Users can customize editor token colors, workspace colors, including colors contributed by extension. It can be done for all themes, per theme or now also using wildcards. See https://code.visualstudio.com/docs/getstarted/themes#_customizing-a-color-theme\r\nThere's no syntax for deriving colors or [use variables](https://github.com/microsoft/vscode/issues/56855)\r\n@memeplex Please file a separate issue if that doesn't work or you have a feature request on customizing colors in user settings.",
      "user":"aeschli"
    },
    {
      "comment":"@memeplex depending on the problem, there are some ways to support multiple themes. My extension, for example, has a Monaco Editor where the User can type some SQL. The Token Colors (colors for each SQL word the user types in) are hardcoded based on Light and Dark themes. To determine if a Theme is Dark or Light, I get the background color for the current theme, calculate its Hue value, then depending on the result I switch the Token Colors. Of course the ideal scenario would be to get the Token Colors for the current theme, but since this is not available, this solution \"kind\" works. I tested with lots of themes and it looks acceptable.\r\nI could also let the user manually customize the Token Colors applied to Monaco, but this would bring a lot of overhead to the code, which is not really necessary. Hopefully one day vscode team will give us these tokens :D\r\nOBS: To get the background color of the current theme, I'm using the approach I mentioned above.\r\n",
      "user":"AllanOricil"
    },
    {
      "comment":"Does anybody know where the Token Colors are saved on the User computer? Im thought about another hack that might work",
      "user":"AllanOricil"
    },
    {
      "comment":"Any thoughts or updates about being able to access this information for extension developers?\r\n\r\nEdit: This is the API I'm looking for but not seeing (`getColor` that is): https://github.com/microsoft/vscode/issues/32813#issuecomment-558242506\r\n\r\nFor my use case, I'm interested in getting access to the theme colors in order to adjust content that I'm writing to the debug console. I want to be able to match/replicate some of the debug colors (i.e. `debugConsole.infoForeground`) that there's currently no way to access.\r\n\r\nI feel like I'm going to have to borrow from the hacky method mentioned above using a webview in order to get these, but that seems clunky and not a great user-experience having a webview panel open every time you open VSCode.",
      "user":"znorman-harris"
    },
    {
      "comment":"@znorman-harris that hack is horrible, but it was the only way I found. I forgot to mention that on Windows machines it takes a lot more time to retrieve colors. Users can see the webview opening and closing :/",
      "user":"AllanOricil"
    }
  ],
  "repository":"vscode",
  "user":"fabiospampinato"
}